---
layout: post
title: "Jvm"
date: 2020-12-17 01:00:00 +0900
categories: Java
---

---
## 1. JVM (Java Virtual Machine)
JVM은 자바 애플리케이션 실행을 위한 가상 머신을 말한다. JVM은 자바 애플리케이션을 클래스로더를 통해 자바 API와 함께 실행시켜 준다.

자바 애플리케이션은 JVM을 통해 OS와 하드웨어에 독립적인 실행이 가능하다.
> → Write once, run anywhere.

---
### 1. JVM Architecture
![](https://user-images.githubusercontent.com/51690528/102365554-06e5d980-3ffb-11eb-9ce7-7cd9a4445d6b.png)

<span class='source'>출처 : <a href="https://medium.com/@lazysoul/jvm-%EC%9D%B4%EB%9E%80-c142b01571f2">JVM이란?</a><br></span>

JVM은 다음의 구성요소들로 이루어져 있다.
1. Class Loader
2. Runtime Data Area
3. Execution Engine

---

#### 1. Class Loader
바이트코드를 실행할 때 클래스 정보를 읽어 클래스 객체를 메모리에 생성해 준다. Load -> Link -> Initialization 순으로 실행된다.

##### 1. Load
해당 클래스 파일을 메모리에 적재한다. 적재된 데이터에 해당하는 클래스가 존재하지 않을 경우 ClassNotFoundException이 발생한다.

##### 2. Link
Verification(확인), prepare(준비), resolve(해석)을 실행한다.
- Verification 과정을 통해 로드된 클래스의 바이트구조가 올바른지 검사해 보안을 확인한다.
- Prepare 과정을 통해 클래스 및 인터페이스의 static 필드를 생성하고 기본값으로 초기화한다.
- resolve 과정을 통해 인스턴스들의 실제 주소값에 대한 심볼릭 링크를 설정해줍니다.

##### 3. Initialization
기본값으로 초기화된 static 필드들을 정의된 값으로 초기화한다.

---

#### 2. Runtime Data Area
JVM의 메모리 영역이다. OS로부터 할당받은 영역을 용도에 따라 여러 영역으로 나누어 관리한다.

##### 1. Method Area
클래스로더가 클래스 파일(.class)을 분석해 클래스의 static변수와 메소드 코드 등 클래스 데이터를 저장한다. 모든 스레드가 공유하는 공간이며, constant pool이라고도 한다.

##### 2. Heap
사용자가 관리하는 인스턴스 변수들이 생성되는 공간이다. Garbage Collector에 의해 관리된다. 모든 스레드가 공유하는 공간이다.

##### 3. Call Stack(Execution Stack)
Thread 제어를 위해 사용되는 메모리 영역 이다. Thread가 생성될때 마다 하나씩 생성된다. Thread의 작업에 필요한 메모리 공간을 제공해주며, 참조변수의 참조값 기본형의 실제 값이 저장된다.

Thread 제어를 위해 사용되는 메모리 영역 이다. Thread가 생성될때 마다 하나씩 생성되며 단일 Thread 당 Method가 호출될 때 메모리를 차지하게 된다. Method 가 호출 되면 Method와 Method 정보는 Stack에 쌓이게 되며 Method 호출이 종료 될때 Stack point에서 제거 된다. Method 정보는 해당 Method의 매개변수, 지역변수, 임시변수 그리고 어드레스(메소드 호출 한 주소)등을 저장하고 Method 종료시 메모리 공간이 사라진다.

#### 4. Native Method Area
자바가 아닌 다른 언어로 작성된 코드를 위한 공간이다. JNI(Java Native Interface)를 통해 표준에 가까운 방식으로 구현이 가능하다.

#### 5. PC Register(program counter register)
PC Registers는 Thread 한 개가 생성될때마다 생기는 공간으로 Thread의 상태 정보와 위치의 메모리 값, 다음에 실행될 명령어의 주소 값 등을 저장한다.

---

#### 3. Execution Engine
Method Area의 바이트 코드를 읽어 Class에 정의된 내용대로 바이트 코드를 실행시킨다. 다음 두 가지 방법을 혼합하여 사용하며, 이를 통해 엄청난 실행 속도의 개선을 이루어내었다. 최신버전의 JVM은 C와 성능의 차이가 거의 없다고 한다.

##### 1. Interpreter 방식
바이트코드를 한 줄씩 해석, 실행하는 방식이다. 초기 방식으로 속도가 느리다는 단점이 있다.

##### 2. JIT(Just In Time) 컴파일 방식 또는 동적 번역(Dynamic Translation)
바이트코드를 JIT 컴파일러를 이용해 프로그램을 실제 실행하는 시점(바이트코드를 실행하는 시점)에 각 OS에 맞는 Native Code로 변환하여 실행 속도를 개선하였다. 하지만, 바이트코드를 Native Code로 변환하는 데에도 비용이 소요되므로 JVM은 모든 코드를 JIT 컴파일러 방식으로 실행하지는 않고 내부적으로 해당 메서드가 얼마나 자주 수행되는지를 체크하다가, 일정 기준이 넘어가면 JIT 컴파일 방식으로 명령어를 실행한다. 실행할 때 인터프리터와 별도의 쓰레드로 동작한다.

이름 때문에 햇갈릴 수 있는데 JIT(Just In Time) 컴파일러는 자바 소스의 컴파일을 수행해주는 javac와는 관계가 없다.

###### ▶ 바이트코드
java 컴파일러에 의해 변환되는 opcode의 크기가 1byte이기 때문에 자바 바이트코드라고 불린다.

##### 3. Garbage Collector
데몬쓰레드로서 실행된다. CPU가 idle한 상태가 되면, Heap 영역의 참조가 끊긴 객체를 찾아 메모리에서 해제해 준다.

---

### 2. JRE (Java Runtime Environment)
자바로 작성된 응용프로그램이 실행되기 위한 최소 환경이다. JVM과 Java API(자바 클래스 라이브러리)를 포함한다.

---

### 3. JDK (Java Development Kit)
JRE + 자바 애플리케이션 개발에 필요한 프로그램(javac.exe)들을 포함한다.

#### 1. javac.exe
자바 컴파일러, 자바소스코드를 바이트코드로 컴파일한다.
~~~
-d
→ 클래스 파일을 생성할 루트 디렉터리를 지정한다. 이 옵션이 없을 경우 클래스파일은 소스파일이 위치한 디렉토리에 생성된다.

-encoding
→ 소스 파일에 사용된 문자열 인코딩을 설정한다.

-target
→ 지정된 버전의 JVM에서 작동되는 클래스파일을 생성시켜준다.

-g
→ 모든 디버깅 정보를 생성한다.
~~~

##### 컴파일러 버전
자바 상위버전의 컴파일러로 생성된 클래스파일은 하위버전의 실행기에서 실행 불가능하다. 하위버전의 컴파일러로 생성된 클래스파일은 상위버전의 실행기에서 실행이 가능하다.
java Complie시 버전 옵션을 통해 컴파일 버전을 선택할 수 있다. 상위버전의 스프링부트를 자바 8으로 실행할 수 있는 이유가 바로 이 설정이다.

##### UnsupportedVersionError
자바 컴파일 버전보다 하위의 버전의 자바로 실행시킬 경우 발생하는 Exception
has been complied by a more recent version of the Java Runtime ....

#### 2. java.exe
자바 인터프리터, 컴파일러가 생성한 바이트코드를 해석하고 실행함.
~~~
-classpath
→ 참조할 클래스 파일의 패스를 설정한다.

-d <property name>=<property value>:
→ System property의 값을 설정한다.

-jar
→ jar파일로 압축되어져 있는 자바 프로그램을 실행시킨다.
~~~

#### 3. javap.exe
역어셈블러, 컴파일된 클래스파일을 원래의 소스로 변환함. 단 원래의 소스가 아닌 선언부만 저장됨.
~~~
-c
→ 역어셈블된 코드를 출력한다.

-l
→ 클래스 내 모든 라인 번호와 지역변수 테이블을 출력한다.
~~~
#### 4. javadoc.exe
자동문서 생성기, 소스파일에 있는 주석 /** */을 이용하여 API 문서와 같은 형식의 문서를 자동으로 생성한다.

#### 5. jar.exe
압축프로그램, 클래스파일과 실행에 관련된 파일을 하나의 jar파일로 압축하거나 압축해제한다. 실행가능한 jar 파일을 만들기 위해 main() 함수가 어떤 클래스에 있는지 그 위치를 지정해줘야 한다.

---

### 4. JDK, JRE, JVM
![](https://user-images.githubusercontent.com/51690528/102374209-6bf1fd00-4004-11eb-8611-e90deeb94a88.jpeg)
출처 : <a href='https://medium.com/webeveloper/jvm-java-virtual-machine-architecture-94b914e93d86'>JVM(Java Virtual Machine) Architecture</a>

자바 9버전부터는 JRE와 JDK을 구분할 필요가 없다. 현재 오라클은 같은 내용의 중복 배포인 JRE를 따로 제공하지 않는다.

---
### 5. 자바 실행순서 정리
~~~ java
// Hello.java 소스코드
public class Hello {
    public static void main(String[] args) {
        int i = 5, j = 4;
        System.out.println("i + j = " + (i + j));
    }
}
~~~
![](https://user-images.githubusercontent.com/51690528/102365562-08170680-3ffb-11eb-9130-d1e695ce2394.jpg)

출처 : <a href="https://cremazer.github.io/Java-Hello-world/">JAVA - Hello World 실행하기(Java Hello World!)</a>

1. Java Compiler가 소스코드를 바이트코드로 변환한다.
2. ClassLoader을 통해 클래스 파일을 JVM에 로딩한다.
3. 로딩된 클래스 파일을 검사하고(파일 형식, 악성코드 등) Execution Engine을 통해 해석한다.
4. 해석된 바이트코드는 Runtime Data Area에 배치되고, 지정된 클래스에서 main(String[] args)를 호출함으로써 실질적으로 실행된다.

<br><br>
#### ▶ 바이트코드 확인하기
1. 컴파일러(javac)를 통해 바이트코드를 생성한다.

~~~
javac hello.java
→ 현재 디렉토리에 Hello.class 파일이 생성됨
~~~

2. 역어셈블러(javap)를 통해 이해 가능한 바이트코드를 얻어낼 수 있다. 역어셈블러 없이 파일을 오픈할 경우 내용의 확인이 힘들다.

~~~
javap -c Hello.class
~~~

~~~ java
Compiled from "Hello.java"
public class project.sanguk.lee.Hello {
  public project.sanguk.lee.Hello();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: iconst_5         // Push int constant
       1: istore_1         // Store int into local variable
       2: iconst_4
       3: istore_2
       4: getstatic     #2 // Field java/lang/System.out:Ljava/io/PrintStream; // Get static field from class
       7: new           #3 // class java/lang/StringBuilder
      10: dup              // Duplicate the top operand stack value
      11: invokespecial #4 // Method java/lang/StringBuilder."<init>":()V
      14: ldc           #5 // String i + j =
      16: invokevirtual #6 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: iload_1          // Load int from local variable
      20: iload_2
      21: iadd             // Add int
      22: invokevirtual #7 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #8 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      31: return
}

~~~

#### 변수 저장시 바이트코드
개발자는 다음의 한 줄을 통해 변수를 저장한다.
~~~
int i = 5;
~~~

하지만, 이는 역어셈블러로 확인한 바이트코드에서는 두개의 명령어로 동작한다.
~~~
0: iconst_5         // Push int constant
1: istore_1         // Store int into local variable
~~~

이로 인해 멀티쓰레드 환경에서 Race condition 문제가 발생할 수 있다.

---

### ▶ Reference
- <a href="https://taes-k.github.io/2019/07/16/java-class-loading/
">JAVA Class loading 과정</a>
- <a href="https://m.blog.naver.com/ksw6169/221647376178">[Java] JVM - Execution Engine이란?</a>
- <a href="https://www.holaxprogramming.com/2013/07/16/java-jvm-runtime-data-area/">JVM의 Runtime Data Area</a>
